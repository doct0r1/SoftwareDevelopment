;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname flower-animation) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

;; a flower planting program

;; Constants
;;===========

(define WIDTH 1900)
(define HEIGHT 900)
(define MTS (empty-scene WIDTH HEIGHT "green"))

(define CENTER (circle 15 "solid" "lightorange"))
(define PETAL (ellipse 30 50 "solid" "purple"))
(define FLOWER
  (overlay (above CENTER(rectangle 1 10 0 "white"))
           (overlay/align "center" "top" (above (beside (rotate 217 PETAL) (rectangle 1 1 0 "white") (rotate 145 PETAL))
                                                (rotate 180 (beside (rotate 73 PETAL) (rectangle 10 0 0 "white") (rotate 288 PETAL))))
                          (above (rectangle 1 61 0 "white") PETAL))))

;; Data Definitions
;; ================

(define-struct flower (x y size))
;; Flower is (make-flower Integer Integer Natural)
;; interp. a flower with x position, y position, and a side length
(define F0 (make-flower 0 0 0))
(define F1 (make-flower (/WIDTH 2) (/HEIGHT 2) 15))

#;
(define (fn-for-flower)
  (... (flower-x)
       (flower-y)
       (flower-size)))

;; Template rules used:
;;  - Compound: 3 fields


;; Functions
;; =========

;; Flower -> Flower
;; starts the animation: start with (main (make-flower (/WIDTH 2) (/ HEIGHT 2) 0))

(define (main f)
  (big-bang f
    (on-tick          tock)   ; Flower -> Flower
    (to-draw        render)   ; Flower -> Image
    (on-mouse handle-mouse))) ; Flower Integer Integer MouseEvent -> Flower

